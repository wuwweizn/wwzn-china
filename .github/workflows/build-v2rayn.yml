name: Build and Push v2rayN (Multi-Arch, Docker Hub + GHCR)

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'v2rayn/**'
      - '.github/workflows/v2rayn-builder.yml'
  schedule:
    # 每周检查一次新版本
    - cron: '0 2 * * 0'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64, armv7]
    permissions:
      contents: read
      packages: write
    env:
      DEFAULT_BUILD_FROM_amd64: alpine:3.21.3
      DEFAULT_BUILD_FROM_aarch64: alpine:3.21.3
      DEFAULT_BUILD_FROM_armv7: alpine:3.21.3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq python3-yaml python3-toml curl

      - name: Get latest v2rayN version
        id: get_version
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/2dust/v2rayN/releases/latest | jq -r '.tag_name')
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "💡 Latest v2rayN version: $LATEST_VERSION"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }}

      - name: Get lowercase repo owner
        run: echo "REPO_OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Extract BUILD_FROM, BUILD_ARCH and VERSION
        id: extract_meta
        run: |
          if [[ "${{ matrix.arch }}" == "arm64" ]]; then
            BUILD_ARCH="aarch64"
          elif [[ "${{ matrix.arch }}" == "armv7" ]]; then
            BUILD_ARCH="armv7"
          else
            BUILD_ARCH="${{ matrix.arch }}"
          fi
          
          ADDON_DIR="v2rayn"
          YAML_PATH="${ADDON_DIR}/build.yaml"
          CONFIG_PATH="${ADDON_DIR}/config.json"
          
          if [[ -f "$YAML_PATH" ]]; then
            BUILD_FROM=$(python3 -c "import yaml; print(yaml.safe_load(open('$YAML_PATH'))['build_from']['${BUILD_ARCH}'])")
          else
            DEFAULT_VAR_NAME="DEFAULT_BUILD_FROM_${BUILD_ARCH}"
            BUILD_FROM="${!DEFAULT_VAR_NAME}"
          fi
          
          if [[ -f "$CONFIG_PATH" ]]; then
            VERSION=$(jq -r .version "$CONFIG_PATH")
          else
            # 使用最新的v2rayN版本
            VERSION="${{ steps.get_version.outputs.latest_version }}"
          fi
          
          echo "BUILD_ARCH=$BUILD_ARCH" >> $GITHUB_ENV
          echo "BUILD_FROM=$BUILD_FROM" >> $GITHUB_ENV
          echo "ADDON_NAME=v2rayn" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "V2RAYN_VERSION=${{ steps.get_version.outputs.latest_version }}" >> $GITHUB_ENV
          
          echo "💡 BUILD_FROM=$BUILD_FROM"
          echo "💡 BUILD_ARCH=$BUILD_ARCH"
          echo "💡 VERSION=$VERSION"
          echo "💡 v2rayN Version=${{ steps.get_version.outputs.latest_version }}"

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push v2rayN for ${{ matrix.arch }}
        uses: docker/build-push-action@v5
        with:
          context: v2rayn
          file: v2rayn/Dockerfile
          platforms: |
            linux/amd64
            linux/arm64
            linux/arm/v7
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER_LC }}/v2rayn-${{ env.BUILD_ARCH }}:${{ env.VERSION }}
            ghcr.io/${{ env.REPO_OWNER_LC }}/v2rayn-${{ env.BUILD_ARCH }}:latest
            ${{ secrets.DOCKER_USERNAME }}/v2rayn-${{ env.BUILD_ARCH }}:${{ env.VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/v2rayn-${{ env.BUILD_ARCH }}:latest
          build-args: |
            BUILD_FROM=${{ env.BUILD_FROM }}
            BUILD_ARCH=${{ env.BUILD_ARCH }}
            V2RAYN_VERSION=${{ env.V2RAYN_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create_manifest:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }}

      - name: Get lowercase repo owner
        run: echo "REPO_OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Get latest v2rayN version
        id: get_version
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/2dust/v2rayN/releases/latest | jq -r '.tag_name')
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Create and push multi-arch manifests
        run: |
          VERSION="${{ steps.get_version.outputs.latest_version }}"
          
          # GHCR manifests
          docker manifest create ghcr.io/${{ env.REPO_OWNER_LC }}/v2rayn:$VERSION \
            ghcr.io/${{ env.REPO_OWNER_LC }}/v2rayn-amd64:$VERSION \
            ghcr.io/${{ env.REPO_OWNER_LC }}/v2rayn-aarch64:$VERSION \
            ghcr.io/${{ env.REPO_OWNER_LC }}/v2rayn-armv7:$VERSION
          
          docker manifest create ghcr.io/${{ env.REPO_OWNER_LC }}/v2rayn:latest \
            ghcr.io/${{ env.REPO_OWNER_LC }}/v2rayn-amd64:latest \
            ghcr.io/${{ env.REPO_OWNER_LC }}/v2rayn-aarch64:latest \
            ghcr.io/${{ env.REPO_OWNER_LC }}/v2rayn-armv7:latest
          
          docker manifest push ghcr.io/${{ env.REPO_OWNER_LC }}/v2rayn:$VERSION
          docker manifest push ghcr.io/${{ env.REPO_OWNER_LC }}/v2rayn:latest
          
          # Docker Hub manifests
          docker manifest create ${{ secrets.DOCKER_USERNAME }}/v2rayn:$VERSION \
            ${{ secrets.DOCKER_USERNAME }}/v2rayn-amd64:$VERSION \
            ${{ secrets.DOCKER_USERNAME }}/v2rayn-aarch64:$VERSION \
            ${{ secrets.DOCKER_USERNAME }}/v2rayn-armv7:$VERSION
          
          docker manifest create ${{ secrets.DOCKER_USERNAME }}/v2rayn:latest \
            ${{ secrets.DOCKER_USERNAME }}/v2rayn-amd64:latest \
            ${{ secrets.DOCKER_USERNAME }}/v2rayn-aarch64:latest \
            ${{ secrets.DOCKER_USERNAME }}/v2rayn-armv7:latest
          
          docker manifest push ${{ secrets.DOCKER_USERNAME }}/v2rayn:$VERSION
          docker manifest push ${{ secrets.DOCKER_USERNAME }}/v2rayn:latest